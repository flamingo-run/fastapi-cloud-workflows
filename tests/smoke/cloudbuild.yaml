# Cloud Build pipeline to build app image, deploy to Cloud Run, generate Workflows YAML, deploy Workflows,
# and run a smoke execution.

options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: ALLOW_LOOSE
substitutions:
  _REGION: us-central1
  _SERVICE_NAME: fastapi-cloudflow-example
  _ORG: flamingo-run

steps:
  - name: gcr.io/cloud-builders/docker
    id: build-image
    args: ["build", "-t", "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ORG}/${_SERVICE_NAME}:$SHORT_SHA", "-f", "examples/app/Dockerfile", "."]

  - name: gcr.io/cloud-builders/docker
    id: push-image
    args: ["push", "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ORG}/${_SERVICE_NAME}:$SHORT_SHA"]

  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: deploy-run
    entrypoint: bash
    args:
      - -c
      - |
        gcloud run deploy ${_SERVICE_NAME} \
          --image ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ORG}/${_SERVICE_NAME}:$SHORT_SHA \
          --region ${_REGION} --no-allow-unauthenticated --quiet

  - name: ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ORG}/${_SERVICE_NAME}:$SHORT_SHA
    id: build-workflows
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        mkdir -p /workspace/build/yaml
        cd /app
        PYTHONPATH=/app fastapi-cloudflow build \
          --app-spec main:app \
          --flows-path flows \
          --out /workspace/build/yaml
        echo "Listing generated YAMLs in /workspace/build/yaml:"
        ls -la /workspace/build/yaml || true
        shopt -s nullglob
        files=(/workspace/build/yaml/*.yaml)
        if [ ${#files[@]} -eq 0 ]; then
          echo "ERROR: No YAML files generated by fastapi-cloudflow build"
          exit 1
        fi

  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: deploy-workflows
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        BASE_URL=$(gcloud run services describe "${_SERVICE_NAME}" --region "${_REGION}" --platform=managed --project "$PROJECT_ID" --format='value(status.url)')
        echo "Resolved BASE_URL=$$BASE_URL"
        shopt -s nullglob
        files=(/workspace/build/yaml/*.yaml)
        if [ ${#files[@]} -eq 0 ]; then
          echo "ERROR: No YAML files found to deploy at /workspace/build/yaml"
          ls -la /workspace/build || true
          ls -la /workspace/build/yaml || true
          exit 1
        fi
        for f in "${files[@]}"; do 
          name=$(basename "$f" .yaml)
          echo "Deploying workflow $$name from $$f"
          gcloud workflows deploy "$$name" \
            --location "${_REGION}" \
            --source="$$f" \
            --set-env-vars="BASE_URL=$${BASE_URL},ECHO_URL=https://httpbin.org/anything,PSP_URL=$${BASE_URL},IDP_URL=$${BASE_URL}" \
            --quiet
        done

  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: run-smoke
    entrypoint: bash
    env:
      - GOOGLE_CLOUD_PROJECT=$PROJECT_ID
    args:
      - -c
      - |
        python3 tests/smoke/run_smoke.py --region ${_REGION}

  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: cleanup
    entrypoint: bash
    args:
      - -c
      - |
        echo "Cleaning up resources..."
        # Clean up Cloud Run service
        gcloud run services delete ${_SERVICE_NAME} --region ${_REGION} --quiet || true
        
        # Clean up deployed workflows based on generated YAMLs
        shopt -s nullglob
        files=(/workspace/build/yaml/*.yaml)
        if [ ${#files[@]} -eq 0 ]; then
          echo "No YAML files found for cleanup" || true
        else
          for f in "${files[@]}"; do
            name=$(basename "$f" .yaml)
            echo "Deleting workflow $$name"
            gcloud workflows delete "$$name" --location ${_REGION} --quiet || true
          done
        fi
        
        # Clean up Artifact Registry image
        gcloud artifacts docker images delete ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ORG}/${_SERVICE_NAME}:$SHORT_SHA --delete-tags --quiet || true
        
        echo "Cleanup completed"

images:
  - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ORG}/${_SERVICE_NAME}:$SHORT_SHA
